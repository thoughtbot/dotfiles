match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$' " Highlight git conflict markers

if v:version < 704
  echo "Warning - old Vim version"
endif

" https://github.com/nelstrom/homebrew-vim
if !has("patch-7.4.865")
  echo "Warning - cdo command may not be available"
end

if !has('clipboard')
  echo "Warning - clipboard not enabled"
endif

" Better navigation within wrapped lines
nmap k gk
nmap j gj

" easier existing of insert mode
imap jk <esc>
" imap kj <esc>

set relativenumber

" Don't add the comment prefix when I hit enter or o/O on a comment line.
set formatoptions-=or

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" strip whitespace on saving Ruby files
" autocmd BufWritePre *.rb :%s/\s\+$//e

" cucumber check runs extremely slowly for some reason
let g:syntastic_cucumber_checkers = []

" not sure why these aren't running by default?
" let g:syntastic_ruby_checkers = ['rubymri', 'rubylint']

" let g:syntastic_haml_checkers = ['haml_lint']

nnoremap <leader>o :CtrlP<CR>

" use the quotestar register for all yank, delete, change, and put operations that have no register explicitly specified
set clipboard=unnamed

" disable gitgutter by default
" let g:gitgutter_enabled = 0

" let g:hardtime_default_on = 1

""" Sick functions and macros """""""""""""""""""""""""""""""""""""""""""""""""

" Open and reload vimrc
map <leader>vrc :tabe $MYVIMRC<cr>
map <leader>vrc :tabe $MYVIMRC.local<cr>
map <leader>vsrc :source $MYVIMRC<cr>:echo "VIMRC reloaded"<cr>

autocmd BufRead,BufNewFile *.markdown set colorcolumn=0

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

set ignorecase
set smartcase

nnoremap <leader><leader> <c-^>

" For ack.vim https://github.com/mileszs/ack.vim#can-i-use-ag-the-silver-searcher-with-this
" if executable('ag')
"   let g:ackprg = 'ag --vimgrep'
" endif

" Enable seeing-is-believing mappings only for Ruby
augroup seeingIsBelievingSettings
  autocmd!

  autocmd FileType ruby nmap <buffer> <Enter> <Plug>(seeing-is-believing-mark-and-run)
  autocmd FileType ruby xmap <buffer> <Enter> <Plug>(seeing-is-believing-mark-and-run)

  autocmd FileType ruby nmap <buffer> <F4> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby xmap <buffer> <F4> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby imap <buffer> <F4> <Plug>(seeing-is-believing-mark)

  autocmd FileType ruby nmap <buffer> <F5> <Plug>(seeing-is-believing-run)
  autocmd FileType ruby imap <buffer> <F5> <Plug>(seeing-is-believing-run)
augroup END

set esckeys "https://www.johnhawthorn.com/2012/09/vi-escape-delays/
hi ColorColumn ctermbg=darkgrey

let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"
" let g:UltiSnipsSnippetsDir="/Users/andy/dotfiles/UltiSnips"
"
"

" http://smartic.us/2009/04/06/code-folding-in-vim/
" set foldmethod=indent   "fold based on indent
" set foldnestmax=10      "deepest fold is 10 levels
" set nofoldenable        "dont fold by default
" set foldlevel=1         "this is just what i use

source ~/.vim/colors/grb256.vim

"fold settings
" ------------
" toggle folding with za.
" fold everything with zM
" unfold everything with zR.
" zm and zr can be used too
set nofoldenable        "dont fold by default
" set g:ruby_fold_lines_limit = 500

" set foldmethod=syntax   "fold based on syntax (except for haml below)
" set foldnestmax=10      "deepest fold is 10 levels
" autocmd BufNewFile,BufRead *.haml setl foldmethod=indent nofoldenable
" autocmd! FileType nofile setl foldmethod=indent nofoldenable

" Space to toggle folds.
" nnoremap <Space> za
" vnoremap <Space> za

" Toggles folds being enabled for this vim session
" function! FoldToggle()
"   if(&foldenable == 1)
"     au WinEnter * set nofen
"     au WinLeave * set nofen
"     au BufEnter * set nofen
"     au BufLeave * set nofen
"     :set nofen
"   else
"     au WinEnter * set fen
"     au WinLeave * set fen
"     au BufEnter * set fen
"     au BufLeave * set fen
"     :set fen
"   endif
" endfunc
"
" nnoremap <Leader>nf :call FoldToggle()<CR>

" https://til.hashrocket.com/posts/e8915e62c0-highlight-markdown-fenced-code-syntax-in-vim
let g:markdown_fenced_languages = ['html', 'vim', 'ruby', 'python', 'bash=sh']

" from @nelstrom's core-vim course
xnoremap . :norm.<CR>

noremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

" per-project vimrc: https://andrew.stwrt.ca/posts/project-specific-vimrc/
set exrc
set secure

" based on http://superuser.com/a/653027
nnoremap <leader>fh vi{c<CR><CR><Up><C-r>"<Esc>:s/,\s+/&\r/g<CR>:'[,']norm ==<CR>

" https://github.com/nathanaelkane/vim-indent-guides/issues/31
colorscheme default

" override from .vimrc
let g:syntastic_check_on_open=0

map <Leader>t :wall<CR><Plug>RunCurrentSpecFile
map <Leader>s :wall<CR><Plug>RunFocusedSpec
map <Leader>l :wall<CR><Plug>RunMostRecentSpec

" let g:spec_runner_dispatcher = 'call VtrSendCommand("{command}")'
let g:spec_runner_dispatcher = 'VtrSendCommand! {command}'

" https://github.com/jackfranklin/dotfiles/blob/master/vim/vimrc
nnoremap <leader>fr :VtrFocusRunner<cr> " <ctrl> \ to go back
nnoremap <leader>kr :VtrKillRunner<cr>
nnoremap <leader>rr :VtrSendLinesToRunner<cr>
nnoremap <leader>dr :VtrSendCtrlD<cr>
nnoremap <leader>ar :VtrAttachToPane<cr>

nmap <leader>f gg=G<CR>
nmap <Leader>ra :RuboCop -a<CR>
nmap <Leader>rc :RuboCop -a<CR>
" https://github.com/garybernhardt/dotfiles/commit/99b7d2537ad98dd7a9d3c82b8775f0de1718b356
" Use the old vim regex engine (version 1, as opposed to version 2, which was
" introduced in Vim 7.3.969). The Ruby syntax highlighting is significantly
" slower with the new regex engine.
" Also http://stackoverflow.com/a/25276429
set re=1

" Enable seeing-is-believing mappings only for Ruby
augroup seeingIsBelievingSettings
  autocmd!

  autocmd FileType ruby nmap <buffer> <Enter> <Plug>(seeing-is-believing-mark-and-run)
  autocmd FileType ruby xmap <buffer> <Enter> <Plug>(seeing-is-believing-mark-and-run)

  autocmd FileType ruby nmap <buffer> <F4> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby xmap <buffer> <F4> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby imap <buffer> <F4> <Plug>(seeing-is-believing-mark)

  autocmd FileType ruby nmap <buffer> <F5> <Plug>(seeing-is-believing-run)
  autocmd FileType ruby imap <buffer> <F5> <Plug>(seeing-is-believing-run)
augroup END

" TODO: write all on save?


" https://github.com/janko-m/vim-test
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>
let test#strategy = "vtr"

" https://github.com/vim-utils/vim-ruby-fold/issues/4
" set foldlevelstart=99
" folding is slow on large files
" let g:ruby_fold_lines_limit = 200

" http://vim.wikia.com/wiki/Search_across_multiple_lines
" Search for the ... arguments separated with whitespace (if no '!'),
" or with non-word characters (if '!' added to command).
function! SearchMultiLine(bang, ...)
  if a:0 > 0
    let sep = (a:bang) ? '\_W\+' : '\_s\+'
    let @/ = join(a:000, sep)
  endif
endfunction
command! -bang -nargs=* -complete=tag S call SearchMultiLine(<bang>0, <f-args>)|normal! /<C-R>/<CR>

let g:ale_linters = {
\   'ruby': ['rubocop'],
\}
nmap <Leader>dt :call localorie#translate()<CR>
